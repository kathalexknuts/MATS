// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// arma_mm
arma::mat arma_mm(const arma::mat& m, const arma::mat& m2);
RcppExport SEXP _MATS_arma_mm(SEXP mSEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(arma_mm(m, m2));
    return rcpp_result_gen;
END_RCPP
}
// flowCalcCpp
Rcpp::List flowCalcCpp(const arma::mat& Am);
RcppExport SEXP _MATS_flowCalcCpp(SEXP AmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Am(AmSEXP);
    rcpp_result_gen = Rcpp::wrap(flowCalcCpp(Am));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MATS_arma_mm", (DL_FUNC) &_MATS_arma_mm, 2},
    {"_MATS_flowCalcCpp", (DL_FUNC) &_MATS_flowCalcCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MATS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
